
/**
 * Represents a String object. Implements the String type.
 */
class String {
	
	field Array string;
	field int max, len;
	
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        let max = maxLength;
		let len = 0;
		
		if(maxLength = 0) {
			let maxLength = 1;
		}
		
		let string = Array.new(maxLength);

		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		do string.dispose();

		return;
    }

    /** Returns the current length of this String. */
    method int length() {

		return len;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {

		return string[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		let string[j] = c;

		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		if(len < max) {
			let string[len] = c;
			let len = len + 1;
		}
		
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		let string[len-1] = 0;
		let len = len - 1;

		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
	var int val;
        var int i;
        var boolean isNegative;
        
        let val = 0;
        
        if( (len > 0) & (string[0] = 45) ) {
            let isNegative = true;
            let i = 1;
        }
        else {
            let isNegative = false;
            let i = 0;
        }
        
        while( (i < len) & String.isDigit(string[i]) ) {
            let val = (val * 10) + String.digitValue(string[i]);
            let i = i + 1;
        }
        
        if(isNegative) {
            return -val;
        } else {
            return val;
        }
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        var int last;
		var int temp;
		
        let temp = Math.abs(number);
		let last = temp - ((temp/10) * 10);
		let last = last + 48;
		
		if(temp < 10) {
            //Clear string to append on it
			let len = 0;

			if(number < 0) {
				do appendChar(45);
			}

			do appendChar(last);
		} else {

			do setInt(number/10);
			do appendChar(last);
		}
		
		return;
    }

    /** Returns whether the given char is a digit or not */
    function boolean isDigit(char c) {

        return ~(c < 48) & ~(c > 57);
    }
    
    /** Returns the integer value of the given digit character */
    function int digitValue(char c) {

        return c - 48;
    }

    /** Returns the new line character. */
    function char newLine() {

		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {

		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {

		return 34;
    }
}